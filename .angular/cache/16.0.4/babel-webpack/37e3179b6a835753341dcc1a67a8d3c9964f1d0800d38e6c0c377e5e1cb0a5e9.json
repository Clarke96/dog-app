{"ast":null,"code":"import { FormControl } from '@angular/forms';\nimport { BehaviorSubject } from 'rxjs';\nimport { ApiActions, DogsActions } from '../shared/state/dogs.actions';\nimport { selectDogs } from '../shared/state/dogs.selector';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/store\";\nimport * as i2 from \"../shared/data-access.service\";\nimport * as i3 from \"@angular/material/button\";\nimport * as i4 from \"@angular/material/input\";\nimport * as i5 from \"@angular/material/form-field\";\nimport * as i6 from \"@angular/material/toolbar\";\nimport * as i7 from \"@angular/forms\";\nimport * as i8 from \"../body/main-body/main-body.component\";\nclass NavComponent {\n  constructor(store, dataService) {\n    this.store = store;\n    this.dataService = dataService;\n    this.allDogs$ = this.store.select(selectDogs);\n    this.allDogs = [];\n    this.searchWordSubject = new BehaviorSubject('');\n    this.searchWord$ = this.searchWordSubject.asObservable();\n    this.filterSearch = new FormControl('');\n  }\n  ngOnInit() {\n    this.store.dispatch(ApiActions.retrievedDogsList());\n    this.allDogs$.subscribe(allDogs => this.allDogs = allDogs);\n  }\n  search() {\n    const allLowerCase = this.filterSearch.value?.toLowerCase().replace(/ /g, '') || '';\n    const dogIds = this.allDogs.filter(dog => dog.name.toLowerCase().replace(/ /g, '').includes(allLowerCase)).map(dog => dog.id);\n    this.store.dispatch(DogsActions.modifyDogs({\n      dogIds\n    }));\n    this.searchWordSubject.next(this.filterSearch.value || '');\n  }\n  resetSearch() {\n    this.searchWordSubject.next('');\n    const dogIds = this.allDogs.map(dog => dog.id);\n    this.store.dispatch(DogsActions.modifyDogs({\n      dogIds\n    }));\n    this.filterSearch.setValue('');\n  }\n}\nNavComponent.ɵfac = function NavComponent_Factory(t) {\n  return new (t || NavComponent)(i0.ɵɵdirectiveInject(i1.Store), i0.ɵɵdirectiveInject(i2.DataAccessService));\n};\nNavComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: NavComponent,\n  selectors: [[\"doggy-nav\"]],\n  decls: 9,\n  vars: 2,\n  consts: [[\"color\", \"secondary\"], [1, \"logo\"], [1, \"searchbar\"], [\"subscriptSizing\", \"dynamic\", 1, \"searchbar\"], [\"matInput\", \"\", \"placeholder\", \"Search dogs\", 3, \"formControl\", \"keyup.enter\"], [\"mat-button\", \"\", \"matSuffix\", \"\", \"color\", \"primary\", 3, \"click\"], [3, \"searchWord$\", \"resetSearch\"]],\n  template: function NavComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"mat-toolbar\", 0)(1, \"span\", 1);\n      i0.ɵɵtext(2, \"Woofipedia\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(3, \"div\", 2)(4, \"mat-form-field\", 3)(5, \"input\", 4);\n      i0.ɵɵlistener(\"keyup.enter\", function NavComponent_Template_input_keyup_enter_5_listener() {\n        return ctx.search();\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(6, \"button\", 5);\n      i0.ɵɵlistener(\"click\", function NavComponent_Template_button_click_6_listener() {\n        return ctx.search();\n      });\n      i0.ɵɵtext(7, \" Woof! \");\n      i0.ɵɵelementEnd()()()();\n      i0.ɵɵelementStart(8, \"doggy-main-body\", 6);\n      i0.ɵɵlistener(\"resetSearch\", function NavComponent_Template_doggy_main_body_resetSearch_8_listener() {\n        return ctx.resetSearch();\n      });\n      i0.ɵɵelementEnd();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"formControl\", ctx.filterSearch);\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"searchWord$\", ctx.searchWord$);\n    }\n  },\n  dependencies: [i3.MatButton, i4.MatInput, i5.MatFormField, i5.MatSuffix, i6.MatToolbar, i7.DefaultValueAccessor, i7.NgControlStatus, i7.FormControlDirective, i8.MainBodyComponent],\n  styles: [\".searchbar {\\n  padding-left: 80px;\\n}\\n  .searchbar .mat-mdc-form-field-infix {\\n  min-height: 48px;\\n}\\n  .searchbar .mat-mdc-text-field-wrapper .mat-mdc-form-field-flex .mat-mdc-floating-label {\\n  top: 24px;\\n}\\n  .searchbar .mat-mdc-text-field-wrapper.mdc-text-field--outlined .mdc-notched-outline--upgraded .mdc-floating-label--float-above {\\n  --mat-mdc-form-field-label-transform: translateY(\\n          -30.75px)\\n          scale(var(--mat-mdc-form-field-floating-label-scale, 0.75));\\n  transform: var(--mat-mdc-form-field-label-transform);\\n}\\n  .searchbar .mat-mdc-text-field-wrapper.mdc-text-field--outlined .mat-mdc-form-field-infix {\\n  padding-top: 12px;\\n  padding-bottom: 12px;\\n}\\n  .searchbar .mat-mdc-text-field-wrapper:not(.mdc-text-field--outlined) .mat-mdc-form-field-infix {\\n  padding-top: 12px;\\n  padding-bottom: 12px;\\n}\\n  .searchbar .mdc-text-field--no-label:not(.mdc-text-field--outlined):not(.mdc-text-field--textarea) .mat-mdc-form-field-infix {\\n  padding-top: 12px;\\n  padding-bottom: 12px;\\n}\\n  .searchbar .mat-mdc-text-field-wrapper:not(.mdc-text-field--outlined) .mat-mdc-floating-label {\\n  display: none;\\n}\\n  .searchbar .mat-form-field-appearance-fill .mat-mdc-select-arrow-wrapper {\\n  transform: none;\\n}\\n  .searchbar {\\n  --mdc-checkbox-state-layer-size: 32px;\\n}\\n\\n  .searchbar .mat-mdc-checkbox-touch-target {\\n  display: none;\\n}\\n  .searchbar .mat-mdc-chip.mat-mdc-standard-chip {\\n  height: 24px;\\n}\\n  .searchbar .mat-mdc-chip.mat-mdc-standard-chip .mdc-evolution-chip__action-touch {\\n  display: none;\\n}\\n  .searchbar .mat-mdc-slide-toggle {\\n  --mdc-switch-state-layer-size: 40px;\\n}\\n  .searchbar .mat-mdc-radio-button .mdc-radio {\\n  --mdc-radio-state-layer-size: 32px;\\n}\\n  .searchbar .mat-mdc-radio-touch-target {\\n  display: none;\\n}\\n  .searchbar .mat-mdc-list-base {\\n  --mdc-list-list-item-one-line-container-height: 40px;\\n  --mdc-list-list-item-two-line-container-height: 56px;\\n  --mdc-list-list-item-three-line-container-height: 80px;\\n}\\n  .searchbar .mat-mdc-list-item.mdc-list-item--with-leading-avatar.mdc-list-item--with-one-line,   .searchbar .mat-mdc-list-item.mdc-list-item--with-leading-checkbox.mdc-list-item--with-one-line,   .searchbar .mat-mdc-list-item.mdc-list-item--with-leading-icon.mdc-list-item--with-one-line {\\n  height: 48px;\\n}\\n  .searchbar .mat-mdc-list-item.mdc-list-item--with-leading-avatar.mdc-list-item--with-two-lines,   .searchbar .mat-mdc-list-item.mdc-list-item--with-leading-checkbox.mdc-list-item--with-two-lines,   .searchbar .mat-mdc-list-item.mdc-list-item--with-leading-icon.mdc-list-item--with-two-lines {\\n  height: 64px;\\n}\\n  .searchbar .mat-mdc-paginator .mat-mdc-form-field-infix {\\n  min-height: 40px;\\n}\\n  .searchbar .mat-mdc-paginator .mat-mdc-text-field-wrapper .mat-mdc-form-field-flex .mat-mdc-floating-label {\\n  top: 20px;\\n}\\n  .searchbar .mat-mdc-paginator .mat-mdc-text-field-wrapper.mdc-text-field--outlined .mdc-notched-outline--upgraded .mdc-floating-label--float-above {\\n  --mat-mdc-form-field-label-transform: translateY(\\n          -26.75px)\\n          scale(var(--mat-mdc-form-field-floating-label-scale, 0.75));\\n  transform: var(--mat-mdc-form-field-label-transform);\\n}\\n  .searchbar .mat-mdc-paginator .mat-mdc-text-field-wrapper.mdc-text-field--outlined .mat-mdc-form-field-infix {\\n  padding-top: 8px;\\n  padding-bottom: 8px;\\n}\\n  .searchbar .mat-mdc-paginator .mat-mdc-text-field-wrapper:not(.mdc-text-field--outlined) .mat-mdc-form-field-infix {\\n  padding-top: 8px;\\n  padding-bottom: 8px;\\n}\\n  .searchbar .mat-mdc-paginator .mdc-text-field--no-label:not(.mdc-text-field--outlined):not(.mdc-text-field--textarea) .mat-mdc-form-field-infix {\\n  padding-top: 8px;\\n  padding-bottom: 8px;\\n}\\n  .searchbar .mat-mdc-paginator .mat-mdc-text-field-wrapper:not(.mdc-text-field--outlined) .mat-mdc-floating-label {\\n  display: none;\\n}\\n  .searchbar .mat-mdc-paginator-container {\\n  min-height: 48px;\\n}\\n  .searchbar .mat-mdc-tab-header {\\n  --mdc-secondary-navigation-tab-container-height: 40px;\\n}\\n  .searchbar .mat-mdc-button.mat-mdc-button-base,   .searchbar .mat-mdc-raised-button.mat-mdc-button-base,   .searchbar .mat-mdc-unelevated-button.mat-mdc-button-base,   .searchbar .mat-mdc-outlined-button.mat-mdc-button-base {\\n  height: 28px;\\n  margin-top: 0;\\n  margin-bottom: 0;\\n}\\n  .searchbar .mat-mdc-button.mat-mdc-button-base .mdc-button__touch,   .searchbar .mat-mdc-raised-button.mat-mdc-button-base .mdc-button__touch,   .searchbar .mat-mdc-unelevated-button.mat-mdc-button-base .mdc-button__touch,   .searchbar .mat-mdc-outlined-button.mat-mdc-button-base .mdc-button__touch {\\n  height: 100%;\\n}\\n  .searchbar .mat-mdc-button.mat-mdc-button-base .mat-mdc-button-touch-target,   .searchbar .mat-mdc-raised-button.mat-mdc-button-base .mat-mdc-button-touch-target,   .searchbar .mat-mdc-unelevated-button.mat-mdc-button-base .mat-mdc-button-touch-target,   .searchbar .mat-mdc-outlined-button.mat-mdc-button-base .mat-mdc-button-touch-target {\\n  display: none;\\n}\\n  .searchbar .mat-mdc-icon-button.mat-mdc-button-base {\\n  --mdc-icon-button-state-layer-size: 40px;\\n  width: var(--mdc-icon-button-state-layer-size);\\n  height: var(--mdc-icon-button-state-layer-size);\\n  padding: 8px;\\n}\\n  .searchbar .mat-mdc-icon-button.mat-mdc-button-base .mat-mdc-button-touch-target {\\n  display: none;\\n}\\n  .searchbar .mat-mdc-table .mdc-data-table__row {\\n  height: 44px;\\n}\\n  .searchbar .mat-mdc-table .mdc-data-table__pagination {\\n  min-height: 44px;\\n}\\n  .searchbar .mat-mdc-table .mdc-data-table__header-row {\\n  height: 48px;\\n}\\n  .searchbar .mat-expansion-panel-header {\\n  height: 40px;\\n}\\n  .searchbar .mat-expansion-panel-header.mat-expanded {\\n  height: 56px;\\n}\\n  .searchbar .mat-horizontal-stepper-header {\\n  height: 64px;\\n}\\n  .searchbar .mat-stepper-label-position-bottom .mat-horizontal-stepper-header,   .searchbar .mat-vertical-stepper-header {\\n  padding: 20px 24px;\\n}\\n  .searchbar .mat-stepper-vertical-line::before {\\n  top: -12px;\\n  bottom: -12px;\\n}\\n  .searchbar .mat-stepper-label-position-bottom .mat-horizontal-stepper-header::after,   .searchbar .mat-stepper-label-position-bottom .mat-horizontal-stepper-header::before {\\n  top: 32px;\\n}\\n  .searchbar .mat-stepper-label-position-bottom .mat-stepper-horizontal-line {\\n  top: 32px;\\n}\\n  .searchbar .mat-toolbar-multiple-rows {\\n  min-height: 56px;\\n}\\n  .searchbar .mat-toolbar-row,   .searchbar .mat-toolbar-single-row {\\n  height: 56px;\\n}\\n@media (max-width: 599px) {\\n    .searchbar .mat-toolbar-multiple-rows {\\n    min-height: 48px;\\n  }\\n    .searchbar .mat-toolbar-row,   .searchbar .mat-toolbar-single-row {\\n    height: 48px;\\n  }\\n}\\n  .searchbar .mat-tree-node {\\n  min-height: 40px;\\n}\\n  .searchbar .mat-button-toggle-appearance-standard .mat-button-toggle-label-content {\\n  line-height: 40px;\\n}\\n  .logo {\\n  padding: 0px 32px;\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"]\n});\nexport { NavComponent };","map":{"version":3,"names":["FormControl","BehaviorSubject","ApiActions","DogsActions","selectDogs","NavComponent","constructor","store","dataService","allDogs$","select","allDogs","searchWordSubject","searchWord$","asObservable","filterSearch","ngOnInit","dispatch","retrievedDogsList","subscribe","search","allLowerCase","value","toLowerCase","replace","dogIds","filter","dog","name","includes","map","id","modifyDogs","next","resetSearch","setValue","i0","ɵɵdirectiveInject","i1","Store","i2","DataAccessService","selectors","decls","vars","consts","template","NavComponent_Template","rf","ctx","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵlistener","NavComponent_Template_input_keyup_enter_5_listener","NavComponent_Template_button_click_6_listener","NavComponent_Template_doggy_main_body_resetSearch_8_listener","ɵɵadvance","ɵɵproperty"],"sources":["/Users/seanclarke/work/angular/dog/src/app/nav/nav.component.ts","/Users/seanclarke/work/angular/dog/src/app/nav/nav.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { Store } from '@ngrx/store';\nimport { BehaviorSubject } from 'rxjs';\nimport { DataAccessService } from '../shared/data-access.service';\nimport { DogModel } from '../shared/model/dog.model';\nimport { ApiActions, DogsActions } from '../shared/state/dogs.actions';\nimport { selectDogs } from '../shared/state/dogs.selector';\n\n@Component({\n  selector: 'doggy-nav',\n  templateUrl: './nav.component.html',\n  styleUrls: ['./nav.component.scss'],\n})\nexport class NavComponent implements OnInit {\n  constructor(private store: Store, private dataService: DataAccessService) {}\n  allDogs$ = this.store.select(selectDogs);\n  allDogs: Array<DogModel> = [];\n  searchWordSubject = new BehaviorSubject('');\n  searchWord$ = this.searchWordSubject.asObservable();\n  filterSearch = new FormControl('');\n\n  ngOnInit(): void {\n    this.store.dispatch(ApiActions.retrievedDogsList());\n    this.allDogs$.subscribe(allDogs => (this.allDogs = allDogs));\n  }\n\n  search(): void {\n    const allLowerCase =\n      this.filterSearch.value?.toLowerCase().replace(/ /g, '') || '';\n    const dogIds = this.allDogs\n      .filter(dog =>\n        dog.name.toLowerCase().replace(/ /g, '').includes(allLowerCase)\n      )\n      .map(dog => dog.id);\n    this.store.dispatch(DogsActions.modifyDogs({ dogIds }));\n    this.searchWordSubject.next(this.filterSearch.value || '');\n  }\n\n  resetSearch(): void {\n    this.searchWordSubject.next('');\n    const dogIds = this.allDogs.map(dog => dog.id);\n    this.store.dispatch(DogsActions.modifyDogs({ dogIds }));\n    this.filterSearch.setValue('');\n  }\n}\n","<mat-toolbar color=\"secondary\">\n  <span class=\"logo\">Woofipedia</span>\n  <div class=\"searchbar\">\n    <mat-form-field subscriptSizing=\"dynamic\" class=\"searchbar\">\n      <input\n        matInput\n        [formControl]=\"filterSearch\"\n        (keyup.enter)=\"search()\"\n        placeholder=\"Search dogs\" />\n      <button mat-button matSuffix color=\"primary\" (click)=\"search()\">\n        Woof!\n      </button>\n    </mat-form-field>\n  </div>\n</mat-toolbar>\n\n<doggy-main-body\n  (resetSearch)=\"resetSearch()\"\n  [searchWord$]=\"searchWord$\"></doggy-main-body>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}